// this is a silly solution
// just to show you how different
// components of this framework work
// please bring your wise to write
// a 'real' solution :)

#include <iostream>
#include <fstream>
#include <string>
#include<cstring>
#include"kernel.h"
int main() {
    std::string cheat_src =
"// this is supposed to be generated by codegen tool\n\
#include \"../run.h\"\n\
\n\
void kernel_example(float (&B)[32][16], float (&C)[32][16], float (&A)[32][16]) {\n\
    for (int i = 0; i < 32; ++i) {\n\
        for (int j = 0; j < 16; ++j) {\n\
            A[i][j] = B[i][j] * C[i][j];\n\
        }\n\
    }\n\
}";
    std::ofstream ofile("./kernels/kernel_example.cc", std::ios::out);
    ofile << cheat_src;
    ofile.close();
/*
    std::string src =
    " #include \"../run.h\"\n\
      \n\
      void kernel_case10(float (&B)[10][10], float (&A)[8][8]) {\n\
        float temp1[8][8]; \n\
  for (int i = 0;i < 8;i++) {\n\
    for (int j = 0;j < 8;j++) {\n\
      temp1[i][j] = ((B[i][j] + (B[(i + 1)][j] + B[(i + 2)][j])) / 3);\n\
    }\n\
  }\n\
  for (int i = 0;i < 8;i++) {\n\
    for (int j = 0;j < 8;j++) {\n\
      A[i][j] = temp1[i][j] ;\n\
    }\n\
  }\n\
}";

    std::ofstream ofile2("./kernels/kernel_case10.cc", std::ios::out);
    ofile2 << src;
    ofile2.close(); */
    for(int i = 1;i<=10;i++)
    {
      std::string src = "./cases/case"+to_string(i)+".json";
      ifstream infile(src);
      if(!infile.is_open()){
        continue;
      }
      else
      {
        infile.close();
      }
      
      char* src_char = new char[src.size()+1];
      strcpy(src_char,src.c_str());
      json json_config = parse(src_char);
      std::string result = "./kernels/" +json_config.name+".cc";
      std::string code = Boost::Internal::compile_project1(json_config);
      std::cout<<code<<std::endl;
      std::string header = "#include \"../run.h\" \n\n";
      std::ofstream ofile(result, std::ios::out);
      ofile << header;
      ofile << code;
      ofile.close();
    }
    return 0;
}

